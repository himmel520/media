// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/himmel520/uoffer/mediaAd/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// TGRepo is an autogenerated mock type for the TGRepo type
type TGRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, tg
func (_m *TGRepo) Add(ctx context.Context, tg *models.TG) (*models.TGResp, error) {
	ret := _m.Called(ctx, tg)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *models.TGResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TG) (*models.TGResp, error)); ok {
		return rf(ctx, tg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TG) *models.TGResp); ok {
		r0 = rf(ctx, tg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TGResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TG) error); ok {
		r1 = rf(ctx, tg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields: ctx
func (_m *TGRepo) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TGRepo) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllWithPagination provides a mock function with given fields: ctx, limit, offset
func (_m *TGRepo) GetAllWithPagination(ctx context.Context, limit int, offset int) ([]*models.TGResp, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithPagination")
	}

	var r0 []*models.TGResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.TGResp, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.TGResp); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TGResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, tg
func (_m *TGRepo) Update(ctx context.Context, id int, tg *models.TGUpdate) (*models.TGResp, error) {
	ret := _m.Called(ctx, id, tg)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.TGResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.TGUpdate) (*models.TGResp, error)); ok {
		return rf(ctx, id, tg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.TGUpdate) *models.TGResp); ok {
		r0 = rf(ctx, id, tg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TGResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *models.TGUpdate) error); ok {
		r1 = rf(ctx, id, tg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTGRepo creates a new instance of TGRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTGRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TGRepo {
	mock := &TGRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
